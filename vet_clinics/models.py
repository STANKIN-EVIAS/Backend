from django.db import models
from pets.models import Pet
from users.models import User


# üè• –ö–õ–ò–ù–ò–ö–ê
class Clinic(models.Model):
    class Meta:
        db_table = '"vet_clinics"."clinic"'
        verbose_name = "–ö–ª–∏–Ω–∏–∫–∞"
        verbose_name_plural = "–ö–ª–∏–Ω–∏–∫–∏"
        ordering = ["name"]

    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∏")
    address = models.CharField(max_length=255, verbose_name="–ê–¥—Ä–µ—Å")
    phone_number = models.CharField(max_length=50, null=True, blank=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    email = models.EmailField(null=True, blank=True, verbose_name="Email")
    website = models.URLField(null=True, blank=True, verbose_name="–°–∞–π—Ç")
    description = models.TextField(null=True, blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ / –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–Ω–∏–∫–µ")

    # –°–≤—è–∑—å —Å —É—Å–ª—É–≥–∞–º–∏ (–º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º)
    services = models.ManyToManyField(
        "Service",
        through="ClinicService",
        related_name="clinics",
        verbose_name="–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ —É—Å–ª—É–≥–∏",
    )

    def __str__(self):
        return self.name


# üíâ –£–°–õ–£–ì–ê
class Service(models.Model):
    class Meta:
        db_table = '"vet_clinics"."service"'
        verbose_name = "–£—Å–ª—É–≥–∞"
        verbose_name_plural = "–£—Å–ª—É–≥–∏"
        ordering = ["name"]

    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏")
    description = models.TextField(null=True, blank=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    price = models.DecimalField(max_digits=8, decimal_places=0, verbose_name="–¶–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    duration_minutes = models.PositiveIntegerField(default=30, verbose_name="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)")

    def __str__(self):
        return self.name


# üîó –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –¥–ª—è —Å–≤—è–∑–∏ "–ö–ª–∏–Ω–∏–∫–∞ ‚Üî –£—Å–ª—É–≥–∞"
class ClinicService(models.Model):
    class Meta:
        db_table = '"vet_clinics"."clinic_service"'
        verbose_name = "–£—Å–ª—É–≥–∞ –∫–ª–∏–Ω–∏–∫–∏"
        verbose_name_plural = "–£—Å–ª—É–≥–∏ –∫–ª–∏–Ω–∏–∫"
        unique_together = ("clinic", "service")

    clinic = models.ForeignKey(
        Clinic,
        on_delete=models.CASCADE,
        related_name="clinic_services",
        verbose_name="–ö–ª–∏–Ω–∏–∫–∞",
    )
    service = models.ForeignKey(
        Service,
        on_delete=models.CASCADE,
        related_name="clinic_services",
        verbose_name="–£—Å–ª—É–≥–∞",
    )
    price_override = models.DecimalField(
        max_digits=8,
        decimal_places=0,
        null=True,
        blank=True,
        verbose_name="–¶–µ–Ω–∞ –≤ —ç—Ç–æ–π –∫–ª–∏–Ω–∏–∫–µ (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)",
    )
    available = models.BooleanField(default=True, verbose_name="–î–æ—Å—Ç—É–ø–Ω–∞")

    def __str__(self):
        return f"{self.clinic.name} ‚Äî {self.service.name}"


# ü©∫ –í–ï–¢–ï–†–ò–ù–ê–†
class Veterinarian(models.Model):
    class Meta:
        db_table = '"vet_clinics"."veterinarian"'
        verbose_name = "–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä"
        verbose_name_plural = "–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä—ã"
        ordering = ["user__last_name"]

    user = models.OneToOneField(
        User, on_delete=models.CASCADE, related_name="veterinarian_profile", verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    clinic = models.ForeignKey(Clinic, on_delete=models.CASCADE, related_name="veterinarians", verbose_name="–ö–ª–∏–Ω–∏–∫–∞")
    specialization = models.CharField(max_length=255, verbose_name="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
    bio = models.TextField(null=True, blank=True, verbose_name="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è / –æ–ø–∏—Å–∞–Ω–∏–µ")

    def __str__(self):
        return f"{self.user.get_full_name()} ({self.specialization})"


# üìÖ –ü–†–ò–Å–ú
class Appointment(models.Model):
    class Meta:
        db_table = '"vet_clinics"."appointment"'
        verbose_name = "–ü—Ä–∏—ë–º"
        verbose_name_plural = "–ü—Ä–∏—ë–º—ã"
        ordering = ["-appointment_date"]

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="appointments", verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    pet = models.ForeignKey(Pet, on_delete=models.CASCADE, related_name="appointments", verbose_name="–ü–∏—Ç–æ–º–µ—Ü")
    clinic = models.ForeignKey(Clinic, on_delete=models.CASCADE, related_name="appointments", verbose_name="–ö–ª–∏–Ω–∏–∫–∞")
    veterinarian = models.ForeignKey(
        Veterinarian,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="appointments",
        verbose_name="–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä",
    )
    service = models.ForeignKey(
        Service, on_delete=models.SET_NULL, null=True, blank=True, related_name="appointments", verbose_name="–£—Å–ª—É–≥–∞"
    )
    appointment_date = models.DateTimeField(verbose_name="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞")
    notes = models.TextField(null=True, blank=True, verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π / –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–°–æ–∑–¥–∞–Ω–æ")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ")

    def __str__(self):
        return f"{self.pet.name} ‚Äî {self.service.name if self.service else '–ü—Ä–∏—ë–º'} ({self.appointment_date:%d.%m.%Y %H:%M})"


# üíä –õ–ï–ß–ï–ù–ò–ï
class Treatment(models.Model):
    class Meta:
        db_table = '"vet_clinics"."treatment"'
        verbose_name = "–õ–µ—á–µ–±–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞"
        verbose_name_plural = "–õ–µ—á–µ–±–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã"
        ordering = ["-created_at"]

    pet = models.ForeignKey(Pet, on_delete=models.CASCADE, related_name="treatments", verbose_name="–ü–∏—Ç–æ–º–µ—Ü")
    appointment = models.ForeignKey(
        Appointment,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="treatments",
        verbose_name="–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º",
    )
    veterinarian = models.ForeignKey(
        Veterinarian,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="treatments",
        verbose_name="–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä",
    )
    diagnosis = models.TextField(verbose_name="–î–∏–∞–≥–Ω–æ–∑")
    procedure = models.TextField(verbose_name="–ü—Ä–æ–≤–µ–¥—ë–Ω–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞")
    cost = models.DecimalField(max_digits=8, decimal_places=0, verbose_name="–°—Ç–æ–∏–º–æ—Å—Ç—å")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")

    def __str__(self):
        return f"{self.pet.name} ‚Äî {self.diagnosis[:40]}"

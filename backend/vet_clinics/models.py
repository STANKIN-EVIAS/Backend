from django.db import models
from pets.models import Pet
from users.models import User  


# üè• –ö–õ–ò–ù–ò–ö–ê
class Clinic(models.Model):
    class Meta:
        db_table = '"vet_clinics"."clinic"'
        verbose_name = "–ö–ª–∏–Ω–∏–∫–∞"
        verbose_name_plural = "–ö–ª–∏–Ω–∏–∫–∏"
        ordering = ["name"]
    name = models.CharField(
        max_length=255,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∏"
    )
    address = models.CharField(
        max_length=255,
        verbose_name="–ê–¥—Ä–µ—Å"
    )
    phone_number = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω"
    )
    email = models.EmailField(
        null=True,
        blank=True,
        verbose_name="Email"
    )
    website = models.URLField(
        null=True,
        blank=True,
        verbose_name="–°–∞–π—Ç"
    )
    description = models.TextField(
        null=True,
        blank=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ / –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–Ω–∏–∫–µ"
    )




    def __str__(self):
        return self.name


# ü©∫ –í–ï–¢–ï–†–ò–ù–ê–†
class Veterinarian(models.Model):
    class Meta:
        db_table = '"vet_clinics"."veterinarian"'
        verbose_name = "–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä"
        verbose_name_plural = "–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä—ã"
        ordering = ["user__last_name"]

    user = models.OneToOneField(
        User,
        on_delete=models.CASCADE,
        related_name="veterinarian_profile",
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    clinic = models.ForeignKey(
        Clinic,
        on_delete=models.CASCADE,
        related_name="veterinarians",
        verbose_name="–ö–ª–∏–Ω–∏–∫–∞"
    )
    specialization = models.CharField(
        max_length=255,
        verbose_name="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
    )

    bio = models.TextField(
        null=True,
        blank=True,
        verbose_name="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è / –æ–ø–∏—Å–∞–Ω–∏–µ"
    )



    def __str__(self):
        return f"{self.user.get_full_name()} ({self.specialization})"


# üíâ –£–°–õ–£–ì–ê
class Service(models.Model):
    class Meta:
        db_table = '"vet_clinics"."service"'
        verbose_name = "–£—Å–ª—É–≥–∞"
        verbose_name_plural = "–£—Å–ª—É–≥–∏"
        ordering = ["name"]

    clinic = models.ForeignKey(
        Clinic,
        on_delete=models.CASCADE,
        related_name="services",
        verbose_name="–ö–ª–∏–Ω–∏–∫–∞"
    )
    name = models.CharField(
        max_length=255,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏"
    )
    description = models.TextField(
        null=True,
        blank=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ"
    )
    price = models.DecimalField(
        max_digits=8,
        decimal_places=2,
        verbose_name="–¶–µ–Ω–∞"
    )
    duration_minutes = models.PositiveIntegerField(
        default=30,
        verbose_name="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)"
    )



    def __str__(self):
        return f"{self.name} ({self.clinic.name})"


# üìÖ –ü–†–ò–Å–ú (–∑–∞–ø–∏—Å—å –ø–∏—Ç–æ–º—Ü–∞ –∫ –≤—Ä–∞—á—É)
class Appointment(models.Model):
    class Meta:
        db_table = '"vet_clinics"."appointment"'
        verbose_name = "–ü—Ä–∏—ë–º"
        verbose_name_plural = "–ü—Ä–∏—ë–º—ã"
        ordering = ["-appointment_date"]

    pet = models.ForeignKey(
        Pet,
        on_delete=models.CASCADE,
        related_name="appointments",
        verbose_name="–ü–∏—Ç–æ–º–µ—Ü"
    )
    clinic = models.ForeignKey(
        Clinic,
        on_delete=models.CASCADE,
        related_name="appointments",
        verbose_name="–ö–ª–∏–Ω–∏–∫–∞"
    )
    veterinarian = models.ForeignKey(
        Veterinarian,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="appointments",
        verbose_name="–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä"
    )
    service = models.ForeignKey(
        Service,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="appointments",
        verbose_name="–£—Å–ª—É–≥–∞"
    )
    appointment_date = models.DateTimeField(
        verbose_name="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞"
    )
    notes = models.TextField(
        null=True,
        blank=True,
        verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π / –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ"
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="–°–æ–∑–¥–∞–Ω–æ"
    )
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name="–û–±–Ω–æ–≤–ª–µ–Ω–æ"
    )



    def __str__(self):
        return f"{self.pet.name} ‚Äî {self.service.name if self.service else '–ü—Ä–∏—ë–º'} ({self.appointment_date:%d.%m.%Y %H:%M})"

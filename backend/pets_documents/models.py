from django.db import models
import uuid
from pets_documents.storage import PetFileImageStorage
from pets.models import Pet


# ü™™ –ü–ê–°–ü–û–†–¢ –ü–ò–¢–û–ú–¶–ê
class Passport(models.Model):
    passport_number = models.CharField(
        max_length=50,
        unique=True,
        verbose_name="–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞"
    )
    pet = models.OneToOneField(
        Pet,
        on_delete=models.CASCADE,
        related_name='passport',
        verbose_name="–ü–∏—Ç–æ–º–µ—Ü"
    )
    issue_date = models.DateField(
        auto_now_add=True,
        verbose_name="–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏"
    )
    issued_by = models.CharField(
        null=True,
        blank=True,
        max_length=255,
        verbose_name="–ö–µ–º –≤—ã–¥–∞–Ω"
    )
    microchip_number = models.CharField(
        max_length=100,
        null=True,
        blank=True,
        verbose_name="–ù–æ–º–µ—Ä –º–∏–∫—Ä–æ—á–∏–ø–∞"
    )
    country_of_issue = models.CharField(
        max_length=100,
        null=True,
        blank=True,
        verbose_name="–°—Ç—Ä–∞–Ω–∞ –≤—ã–¥–∞—á–∏"
    )
    photo = models.ImageField(
        upload_to='pets/passports/',
        null=True,
        blank=True,
        verbose_name="–§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞"
    )

    def __str__(self):
        return f"{self.pet.name} ‚Äî {self.passport_number}"

    class Meta:
        db_table = "passport"
        verbose_name = "–ü–∞—Å–ø–æ—Ä—Ç –ø–∏—Ç–æ–º—Ü–∞"
        verbose_name_plural = "–ü–∞—Å–ø–æ—Ä—Ç–∞ –ø–∏—Ç–æ–º—Ü–µ–≤"
        ordering = ['-issue_date']


# üìú –°–ï–†–¢–ò–§–ò–ö–ê–¢ (–≤–∞–∫—Ü–∏–Ω–∞—Ü–∏—è, —Ä–æ–¥–æ—Å–ª–æ–≤–Ω–∞—è, —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è –∏ —Ç.–ø.)
class Certificate(models.Model):
    certificate_number = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        unique=True,
        verbose_name="–ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
    )
    CERTIFICATE_TYPES = [
        ('vaccination', '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è'),
        ('sterilization', '–°—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏—è'),
        ('pedigree', '–†–æ–¥–æ—Å–ª–æ–≤–Ω–∞—è'),
        ('training', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ / –∫—É—Ä—Å'),
        ('other', '–ü—Ä–æ—á–µ–µ'),
    ]

    pet = models.ForeignKey(
        Pet,
        on_delete=models.CASCADE,
        related_name='certificates',
        verbose_name="–ü–∏—Ç–æ–º–µ—Ü"
    )
    certificate_type = models.CharField(
        max_length=50,
        choices=CERTIFICATE_TYPES,
        verbose_name="–¢–∏–ø —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
    )
    title = models.CharField(
        null=True,
        blank=True,
        max_length=255,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
    )
    issue_date = models.DateField(
        null=True,
        blank=True,
        auto_now_add=True,
        verbose_name="–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏"
    )
    expiration_date = models.DateField(
        null=True,
        blank=True,
        verbose_name="–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"
    )
    issued_by = models.CharField(
        null=True,
        blank=True,
        max_length=255,
        verbose_name="–ö–µ–º –≤—ã–¥–∞–Ω"
    )
    description = models.TextField(
        null=True,
        blank=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ / –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    )
    document_file = models.FileField(
        upload_to=PetFileImageStorage.image_path,
        storage=PetFileImageStorage(),
        blank=True,
        null=True,
        verbose_name="–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
    )

    def __str__(self):
        return f"{self.get_certificate_type_display()} ‚Äî {self.pet.name}"


    class Meta:
        db_table = "certificate"
        verbose_name = "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
        verbose_name_plural = "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
        ordering = ['-issue_date']


# ü©∫ –ú–ï–î–ò–¶–ò–ù–°–ö–ê–Ø –ö–ê–†–¢–ê
class MedicalCard(models.Model):
    medical_number = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        unique=True,
        verbose_name="–ù–æ–º–µ—Ä –º–µ–¥–∫–∞—Ä—Ç—ã"
    )
    pet = models.ForeignKey(
        Pet,
        on_delete=models.CASCADE,
        related_name='medical_cards',
        verbose_name="–ü–∏—Ç–æ–º–µ—Ü"
    )
    weight = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        null=True,
        blank=True,
        verbose_name="–í–µ—Å (–∫–≥)"
    )
    blood_type = models.CharField(
        max_length=10,
        null=True,
        blank=True,
        verbose_name="–ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏"
    )
    allergies = models.TextField(
        null=True,
        blank=True,
        verbose_name="–ê–ª–ª–µ—Ä–≥–∏–∏"
    )
    chronic_diseases = models.TextField(
        null=True,
        blank=True,
        verbose_name="–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è"
    )
    vaccinations = models.TextField(
        null=True,
        blank=True,
        verbose_name="–ü—Ä–∏–≤–∏–≤–∫–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ)"
    )
    last_checkup_date = models.DateField(
        null=True,
        blank=True,
        verbose_name="–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å–º–æ—Ç—Ä"
    )
    next_checkup_date = models.DateField(
        null=True,
        blank=True,
        verbose_name="–°–ª–µ–¥—É—é—â–∏–π –æ—Å–º–æ—Ç—Ä"
    )
    certificate = models.ForeignKey(
        Certificate,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='medical_cards',
        verbose_name="–°–≤—è–∑–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
    )


    def __str__(self):
        return f"–ú–µ–¥–∫–∞—Ä—Ç–∞ ‚Äî {self.pet.name}"

    class Meta:
        db_table = "medical_card"
        verbose_name = "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞"
        verbose_name_plural = "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã"
